"""
AUTO.RIA MCP Server –¥–ª—è –ø–æ—à—É–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: fastmcp run servers/mcp-server-auto-ria-search.py
"""

from fastmcp import FastMCP
import httpx
import asyncio
from typing import Optional, List, Dict, Any
import json

mcp = FastMCP("AUTO.RIA Search Server üöó")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è API –∫–ª—é—á–∞
api_key: Optional[str] = None

# –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è AUTO.RIA API
BASE_URL = "https://developers.ria.com/auto"

@mcp.tool()
def set_api_key(key: str) -> str:
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î API –∫–ª—é—á –¥–ª—è AUTO.RIA

    Args:
        key: API –∫–ª—é—á –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ developers.ria.com
    """
    global api_key
    api_key = key
    return f"API –∫–ª—é—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"


def add_list_params(params: dict, param_name: str, values: Optional[List[int]]) -> None:
    """
    –î–æ–¥–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–ø–∏—Å–∫—É –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è AUTO.RIA API
    """
    if values:
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ - —Å–ø–æ—á–∞—Ç–∫—É —á–µ—Ä–µ–∑ –∫–æ–º—É
        params[param_name] = values
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏
        # for i, value in enumerate(values):
        #     params[f"{param_name}[{i}]"] = value


def add_array_params(params: Dict[str, Any], name: str,
                     values: Optional[List[int]]) -> None:
    """
    –î–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–ø–∏—Å–∫—É –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ name[0], name[1]...
    """
    if values:
        for idx, val in enumerate(values):
            params[f"{name}[{idx}]"] = val


@mcp.tool()
async def search_cars(
    category_id: int = 1,
    s_yers: Optional[List[int]] = None,
    po_yers: Optional[List[int]] = None,
    price_ot: Optional[int] = None,
    price_do: Optional[int] = None,
    currency: int = 1,
    auctionPossible: Optional[int] = None,
    exchangePossible: Optional[int] = None,
    with_exchange_type: Optional[int] = None,
    credit_possible: Optional[int] = None,
    under_credit: Optional[int] = None,
    confiscated_car: Optional[int] = None,
    custom_cleared: Optional[int] = None,
    page: int = 0,
    countpage: int = 20,
    auto_id: Optional[int] = None,
    marka_id: Optional[List[int]] = None,
    model_id: Optional[List[int]] = None,
    city_id: Optional[List[int]] = None,
    state_id: Optional[List[int]] = None,
    gear_id: Optional[List[int]] = None,
    drive_id: Optional[List[int]] = None,
    fuel_id: Optional[List[int]] = None,
    engineVolume_ot: Optional[float] = None,
    engineVolume_do: Optional[float] = None,
    power_ot: Optional[int] = None,
    power_do: Optional[int] = None,
    raceInt_ot: Optional[int] = None,
    raceInt_do: Optional[int] = None,
    bodystyle_id: Optional[List[int]] = None,
    color_id: Optional[List[int]] = None,
    verified: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–æ—à—É–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å —á–µ—Ä–µ–∑ AUTO.RIA API

    Args:
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (1 - –ª–µ–≥–∫–æ–≤—ñ –∞–≤—Ç–æ, 2 - –º–æ—Ç–æ, 3 - –≤–∞–Ω—Ç–∞–∂—ñ–≤–∫–∏, 4 - –∞–≤—Ç–æ–±—É—Å–∏, 5 - –ø—Ä–∏—á–µ–ø–∏, 6 - —Å/–≥ —Ç–µ—Ö–Ω—ñ–∫–∞, 7 - —Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞, 8 - –≤–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, 9 - –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)
        s_yers: –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –≤—ñ–¥ (—Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤)
        po_yers: –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –¥–æ (—Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤)
        price_ot: –¶—ñ–Ω–∞ –≤—ñ–¥
        price_do: –¶—ñ–Ω–∞ –¥–æ
        currency: –í–∞–ª—é—Ç–∞ (1 - USD, 2 - EUR, 3 - UAH)
        auctionPossible: –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞—É–∫—Ü—ñ–æ–Ω—É (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        exchangePossible: –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±–º—ñ–Ω—É (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        with_exchange_type: –¢–∏–ø –æ–±–º—ñ–Ω—É (1 - –∞–≤—Ç–æ, 2 - –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å, 3 - –∫–æ–º–µ—Ä—Ü—ñ—è)
        credit_possible: –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—É (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        under_credit: –ü—ñ–¥ –∫—Ä–µ–¥–∏—Ç–æ–º (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        confiscated_car: –ö–æ–Ω—Ñ—ñ—Å–∫–æ–≤–∞–Ω–µ –∞–≤—Ç–æ (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        custom_cleared: –†–æ–∑–º–∏—Ç–Ω–µ–Ω–µ (0 - –Ω—ñ, 1 - —Ç–∞–∫)
        page: –ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ø–æ—á–∞—Ç–æ–∫ –∑ 0)
        countpage: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É (–º–∞–∫—Å 100)
        auto_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ
        marka_id: ID –º–∞—Ä–∫–∏ –∞–≤—Ç–æ (—Å–ø–∏—Å–æ–∫)
        model_id: ID –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ (—Å–ø–∏—Å–æ–∫)
        city_id: ID –º—ñ—Å—Ç–∞ (—Å–ø–∏—Å–æ–∫)
        state_id: ID –æ–±–ª–∞—Å—Ç—ñ (—Å–ø–∏—Å–æ–∫)
        gear_id: ID –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á (—Å–ø–∏—Å–æ–∫: 1 - —Ä—É—á–Ω–∞, 2 - –∞–≤—Ç–æ–º–∞—Ç, 3 - —Ç–∏–ø—Ç—Ä–æ–Ω—ñ–∫, 4 - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞, 5 - –≤–∞—Ä—ñ–∞—Ç–æ—Ä)
        drive_id: ID –ø—Ä–∏–≤–æ–¥—É (—Å–ø–∏—Å–æ–∫: 1 - –ø–µ—Ä–µ–¥–Ω—ñ–π, 2 - –∑–∞–¥–Ω—ñ–π, 3 - –ø–æ–≤–Ω–∏–π)
        fuel_id: ID —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞ (—Å–ø–∏—Å–æ–∫)
        engineVolume_ot: –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ –≤—ñ–¥ (–ª)
        engineVolume_do: –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ –¥–æ (–ª)
        power_ot: –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ (–∫.—Å.)
        power_do: –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –¥–æ (–∫.—Å.)
        raceInt_ot: –ü—Ä–æ–±—ñ–≥ –≤—ñ–¥ (—Ç–∏—Å. –∫–º)
        raceInt_do: –ü—Ä–æ–±—ñ–≥ –¥–æ (—Ç–∏—Å. –∫–º)
        bodystyle_id: ID —Ç–∏–ø—É –∫—É–∑–æ–≤–∞ (—Å–ø–∏—Å–æ–∫)
        color_id: ID –∫–æ–ª—å–æ—Ä—É (—Å–ø–∏—Å–æ–∫)
        verified: –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (0 - –Ω—ñ, 1 - —Ç–∞–∫)

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É
    """
    if not api_key:
        return {"error": "API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ set_api_key() —Å–ø–æ—á–∞—Ç–∫—É"}

    # –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
    params = {
        "api_key": api_key,
        "category_id": category_id,
        "page": page,
        "countpage": countpage
    }

    # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    if price_ot is not None:
        params["price_ot"] = price_ot
    if price_do is not None:
        params["price_do"] = price_do
    if currency != 1:
        params["currency"] = currency
    if auctionPossible is not None:
        params["auctionPossible"] = auctionPossible
    if exchangePossible is not None:
        params["exchangePossible"] = exchangePossible
    if with_exchange_type is not None:
        params["with_exchange_type"] = with_exchange_type
    if credit_possible is not None:
        params["credit_possible"] = credit_possible
    if under_credit is not None:
        params["under_credit"] = under_credit
    if confiscated_car is not None:
        params["confiscated_car"] = confiscated_car
    if custom_cleared is not None:
        params["custom_cleared"] = custom_cleared
    if auto_id is not None:
        params["auto_id"] = auto_id
    if engineVolume_ot is not None:
        params["engineVolume_ot"] = engineVolume_ot
    if engineVolume_do is not None:
        params["engineVolume_do"] = engineVolume_do
    if power_ot is not None:
        params["power_ot"] = power_ot
    if power_do is not None:
        params["power_do"] = power_do
    if raceInt_ot is not None:
        params["raceInt_ot"] = raceInt_ot
    if raceInt_do is not None:
        params["raceInt_do"] = raceInt_do
    if verified is not None:
        params["verified"] = verified

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è GET –∑–∞–ø–∏—Ç—É
            # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            query_params = []

            for key, value in params.items():
                query_params.append((key, str(value)))

            add_array_params("s_yers", s_yers)
            add_array_params("po_yers", po_yers)
            add_array_params("marka_id", marka_id)
            add_array_params("model_id", model_id)
            add_array_params("city_id", city_id)
            add_array_params("state_id", state_id)
            add_array_params("gear_id", gear_id)
            add_array_params("drive_id", drive_id)
            add_array_params("fuel_id", fuel_id)
            add_array_params("bodystyle_id", bodystyle_id)
            add_array_params("color_id", color_id)

            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ list of tuples
            response = await client.get(f"{BASE_URL}/search", params=query_params)

            # –î–ª—è –¥–µ–±–∞–≥—É - –≤–∏–≤–æ–¥–∏–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π URL
            print(f"Request URL: {response.url}")

            response.raise_for_status()
            data = response.json()

            return {
                "success": True,
                "total_count": data.get("count", 0),
                "page": page,
                "countpage": countpage,
                "cars": data.get("result", []),
                "request_url": str(response.url)  # –î–ª—è –¥–µ–±–∞–≥—É
            }

    except httpx.HTTPError as e:
        return {
            "success": False,
            "error": f"HTTP –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            "status_code": getattr(e.response, 'status_code', None) if hasattr(e, 'response') else None
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        }


@mcp.tool()
async def search_cars(
    *,
    category_id: int = 1,
    s_yers: Optional[List[int]] = None,
    po_yers: Optional[List[int]] = None,
    price_ot: Optional[int] = None,
    price_do: Optional[int] = None,
    currency: int = 1,
    auctionPossible: Optional[int] = None,
    exchangePossible: Optional[int] = None,
    with_exchange_type: Optional[int] = None,
    credit_possible: Optional[int] = None,
    under_credit: Optional[int] = None,
    confiscated_car: Optional[int] = None,
    custom_cleared: Optional[int] = None,
    page: int = 0,
    countpage: int = 20,
    auto_id: Optional[int] = None,
    marka_id: Optional[List[int]] = None,
    model_id: Optional[List[int]] = None,
    city_id: Optional[List[int]] = None,
    state_id: Optional[List[int]] = None,
    gear_id: Optional[List[int]] = None,
    drive_id: Optional[List[int]] = None,
    fuel_id: Optional[List[int]] = None,
    engineVolume_ot: Optional[float] = None,
    engineVolume_do: Optional[float] = None,
    power_ot: Optional[int] = None,
    power_do: Optional[int] = None,
    raceInt_ot: Optional[int] = None,
    raceInt_do: Optional[int] = None,
    bodystyle_id: Optional[List[int]] = None,
    color_id: Optional[List[int]] = None,
    verified: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å AUTO.RIA. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–∏–≤. –¥–æ–∫—Å—Ç—Ä—ñ–Ω–≥ –≤–∏—â–µ.
    """

    # ---------- –≤–∞–ª—ñ–¥–∞—Ü—ñ—è ----------
    if not api_key:
        return {"success": False,
                "error": "API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ; —Å–ø–µ—Ä—à—É –≤–∏–∫–ª–∏—á—Ç–µ set_api_key()"}
    if s_yers and po_yers and len(s_yers) != len(po_yers):
        return {"success": False,
                "error": "s_yers —ñ po_yers –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–æ—ó –¥–æ–≤–∂–∏–Ω–∏"}

    # ---------- –±–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ----------
    params: Dict[str, Any] = {
        "api_key": api_key,
        "category_id": category_id,
        "page": page,
        "countpage": min(countpage, 100)  # API –ª—ñ–º—ñ—Ç
    }

    # ---------- —Å–∫–∞–ª—è—Ä–Ω—ñ –æ–ø—Ü—ñ—ó ----------
    scalar_map = {
        "price_ot": price_ot,
        "price_do": price_do,
        "currency": currency if currency != 1 else None,
        "auctionPossible": auctionPossible,
        "exchangePossible": exchangePossible,
        "with_exchange_type": with_exchange_type,
        "credit_possible": credit_possible,
        "under_credit": under_credit,
        "confiscated_car": confiscated_car,
        "custom_cleared": custom_cleared,
        "auto_id": auto_id,
        "engineVolume_ot": engineVolume_ot,
        "engineVolume_do": engineVolume_do,
        "power_ot": power_ot,
        "power_do": power_do,
        "raceInt_ot": raceInt_ot,
        "raceInt_do": raceInt_do,
        "verified": verified
    }
    params.update({k: v for k, v in scalar_map.items() if v is not None})

    # ---------- —Å–ø–∏—Å–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó ----------
    add_array_params(params, "s_yers", s_yers)
    add_array_params(params, "po_yers", po_yers)
    add_array_params(params, "marka_id", marka_id)
    add_array_params(params, "model_id", model_id)
    add_array_params(params, "city_id", city_id)
    add_array_params(params, "state_id", state_id)
    add_array_params(params, "gear_id", gear_id)
    add_array_params(params, "drive_id", drive_id)
    add_array_params(params, "fuel_id", fuel_id)
    add_array_params(params, "bodystyle_id", bodystyle_id)
    add_array_params(params, "color_id", color_id)

    # ---------- HTTP –∑–∞–ø–∏—Ç ----------
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.get(f"{BASE_URL}/search", params=params)
            resp.raise_for_status()
            data = resp.json()

        return {
            "success": True,
            "total_count": data.get("count", 0),
            "cars": data.get("result", []),
            "page": page,
            "countpage": countpage,
            "request_url": str(resp.url)  # –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É
        }

    except httpx.HTTPStatusError as e:
        return {
            "success": False,
            "error": f"HTTP {e.response.status_code}: {e.response.text}"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}"
        }


@mcp.tool()
async def get_car_info(auto_id: int) -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∞–≤—Ç–æ –∑–∞ –π–æ–≥–æ ID

    Args:
        auto_id: ID –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ AUTO.RIA

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∞–≤—Ç–æ
    """
    if not api_key:
        return {"error": "API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ set_api_key() —Å–ø–æ—á–∞—Ç–∫—É"}

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(
                f"{BASE_URL}/info",
                params={"api_key": api_key, "auto_id": auto_id}
            )
            response.raise_for_status()

            return {
                "success": True,
                "car_info": response.json()
            }

    except httpx.HTTPError as e:
        return {
            "success": False,
            "error": f"HTTP –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        }

@mcp.tool()
async def get_average_price(
    marka_id: int,
    model_id: int,
    yers: int,
    gear_id: Optional[int] = None,
    race_id: Optional[int] = None,
    fuel_id: Optional[int] = None
) -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

    Args:
        marka_id: ID –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
        model_id: ID –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ
        yers: –†—ñ–∫ –≤–∏–ø—É—Å–∫—É
        gear_id: ID –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        race_id: ID –ø—Ä–æ–±—ñ–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        fuel_id: ID —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É
    """
    if not api_key:
        return {"error": "API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ set_api_key() —Å–ø–æ—á–∞—Ç–∫—É"}

    params = {
        "api_key": api_key,
        "marka_id": marka_id,
        "model_id": model_id,
        "yers": yers
    }

    if gear_id is not None:
        params["gear_id"] = gear_id
    if race_id is not None:
        params["race_id"] = race_id
    if fuel_id is not None:
        params["fuel_id"] = fuel_id

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{BASE_URL}/average_price", params=params)
            response.raise_for_status()

            return {
                "success": True,
                "average_price_info": response.json()
            }

    except httpx.HTTPError as e:
        return {
            "success": False,
            "error": f"HTTP –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        }

@mcp.tool()
def get_search_help() -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É AUTO.RIA
    """
    help_text = """
    üöó AUTO.RIA MCP Server - –î–æ–≤—ñ–¥–∫–∞ –ø–æ –ø–æ—à—É–∫—É
    
    –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    1. set_api_key(key) - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ API –∫–ª—é—á
    2. search_cars(...) - –ø–æ—à—É–∫ –∞–≤—Ç–æ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∑ —Å–ø–∏—Å–∫–∞–º–∏)
    3. search_cars_alternative(...) - —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø–æ—à—É–∫ (–æ–¥–∏–Ω–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
    4. get_car_info(auto_id) - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ
    5. get_average_price(...) - —Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∞–≤—Ç–æ
    
    –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:
    
    üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É:
    - s_yers: —Ä—ñ–∫ –≤—ñ–¥ –∞–±–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤ [2010, 2015]  
    - po_yers: —Ä—ñ–∫ –¥–æ –∞–±–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤ [2020, 2023]
    
    üí∞ –¶—ñ–Ω–∞:
    - price_ot/price_do: —Ü—ñ–Ω–∞ –≤—ñ–¥/–¥–æ
    - currency: 1-USD, 2-EUR, 3-UAH
    
    üè≠ –ú–∞—Ä–∫–∞ —ñ –º–æ–¥–µ–ª—å:
    - marka_id: [79] –¥–ª—è BMW, [84] –¥–ª—è Mercedes —Ç–æ—â–æ
    - model_id: ID –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ
    
    üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:
    - city_id: [5] –¥–ª—è –ö–∏—î–≤–∞, [4] –¥–ª—è –•–∞—Ä–∫–æ–≤–∞ —Ç–æ—â–æ
    - state_id: ID –æ–±–ª–∞—Å—Ç—ñ
    
    ‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
    - gear_id: [1-—Ä—É—á–Ω–∞, 2-–∞–≤—Ç–æ–º–∞—Ç, 3-—Ç–∏–ø—Ç—Ä–æ–Ω—ñ–∫, 4-–∞–¥–∞–ø—Ç–∏–≤–Ω–∞, 5-–≤–∞—Ä—ñ–∞—Ç–æ—Ä]
    - drive_id: [1-–ø–µ—Ä–µ–¥–Ω—ñ–π, 2-–∑–∞–¥–Ω—ñ–π, 3-–ø–æ–≤–Ω–∏–π]
    - fuel_id: ID —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞
    - engineVolume_ot/do: –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞ –≤—ñ–¥/–¥–æ (–ª)
    - power_ot/do: –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥/–¥–æ (–∫.—Å.)
    - raceInt_ot/do: –ø—Ä–æ–±—ñ–≥ –≤—ñ–¥/–¥–æ (—Ç–∏—Å. –∫–º)
    
    üé® –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–≥–ª—è–¥:
    - bodystyle_id: ID —Ç–∏–ø—É –∫—É–∑–æ–≤–∞
    - color_id: ID –∫–æ–ª—å–æ—Ä—É
    
    ‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó:
    - verified: 1 –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
    - custom_cleared: 1 –¥–ª—è —Ä–æ–∑–º–∏—Ç–Ω–µ–Ω–∏—Ö –∞–≤—Ç–æ
    - exchangePossible: 1 –¥–ª—è –∞–≤—Ç–æ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–±–º—ñ–Ω—É
    - credit_possible: 1 –¥–ª—è –∞–≤—Ç–æ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫—Ä–µ–¥–∏—Ç—É
    
    üìÑ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è:
    - page: –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑ 0)
    - countpage: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–º–∞–∫—Å 100)
    
    –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    await search_cars_alternative(marka_id=79, price_ot=10000, price_do=50000, currency=1)
    """
    return help_text


if __name__ == "__main__":
    mcp.run()